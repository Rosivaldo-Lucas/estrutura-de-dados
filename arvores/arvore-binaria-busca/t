void relaxa_aresta(grafo_t *g, int i, int j, float c){
    if(g->v[j].custo > g->v[i].custo + c) {
        g->v[j].custo = g->v[i].custo + c;
        g->v[j].vant = i;
    }
}

void grafo_bellman_ford(grafo_t *g, int s){
    inicializa(g);
    
    g->v[s].custo = 0.0f;
    
    for (int k = 1; k < g->n; k++) {
        for (int i = 0; i < g->n; i++) {
            for (aresta_t *a = g->v[i].lista; a != NULL; a = a->prox) {
                int j = a->v;
                relaxa_aresta(g, i, j, a->custo);
            }
        }
    }
}

void relaxa_aresta(grafo_t *g, int i, int j, float c){
    if(g->v[j].custo > g->v[i].custo + c) {
        g->v[j].custo = g->v[i].custo + c;
        g->v[j].vant = i;
    }
}

int extrai_minimo(grafo_t *g) {
    int imin = -1;
    
    for (int i = 0; i < g->n; i++) {
        if (g->v[i].cor == CINZA) {
            if (imin < 0 || g->v[i].custo < g->v[imin].custo) {
                imin = i;
            }
        }
    }

    return imin;
}

void grafo_dijkstra(grafo_t *g, int s, int t) {
    int i;
    
    inicializa(g); // inicializa vértices como BRANCO que indica ainda não verificados
    
    g->v[s].custo = 0.0f;
    g->v[s].cor = CINZA ; // CINZA representa frente de avanço
    
    while ((i = extrai_minimo(g)) >= 0) {
        g->v[i].cor = PRETO ; // PRETO representa vértice processado
        
        if (i == t) {
            break;
        }
        
        for (aresta_t *a = g->v[i].lista; a != NULL; a = a->prox) {
            if (g->v[a->v].cor != PRETO) {
                relaxa_aresta(g, i, a->v, a->custo);
                g->v[a->v].cor = CINZA;
            }
        }
    }
}
